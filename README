
Slightly changes manner of determining idle timeout, changes menu behavior for the
wireless update feature when it's hidden behind the battery.


== Changes ==

Updated code to detect button inactivity when sTime.last_activity counts down to zero,
removing the need for sTime.system_time (and any overflow detection technically needed,
but not present).

The wireless update (rfbsl) menu, when hidden behind the battery, has been changed:
pressing "down" toggles between the battery voltage and the rfbsl function. When the
rfbsl function is selected, long_num activates the wireless update. This now uses the
same code (for activating the wireless update) that the non-hidden version of rfbsl uses.

== Status ==

Time- and alarm-related functionalities seem to work. The stopwatch seems to work just fine.

The "bug" I thought I had discovered with the wireless update (rfbsl) appears to have just
been my own fault. The function works if you remember to turn on your wireless access point
first! I have, however, changed the menu for the wireless update (when hidden behind the
battery), such that pressing the down arrow goes into rfbsl mode, instead of long_num.


== Todo ==

  * Verify changes haven't disrupted other time-related code (sidereal clock, eggtimer, etc.)

  * Tidy up menu code for battery and rfbsl when using hidden rfbsl option. (Should probably
    merge their display functions for this mode, rather than use the display_discret_rfbsl
    hack.)

  * Update code sizes in config script (e.g. day of week now has a larger delta-codesize).

  * Re-arrange use of Timer A, now that TIMER0_A0 interrupt is unused

  * Update and/or verify IAR project file (probably just need to add "rtc.c" and "rtc.h"
    references somewhere)

  * Add in optional hour or noon/midnight beep functionality via RTCTEV interrupt

== Requirements ==

msp430-gcc4 http://mspgcc4.sourceforge.net/
make
python http://python.org

== Supported Compilers ==

msp430-gcc4
   Working combinations:
   gcc=4.4.3 binutils=2.20.1 libc=20100430

IAR msp430

Patches for more (more efficient) compilers are welcome :-)


== HOWTO ==

Copy gcc/intrinsics.h into [msp430-gcc-path]/msp430/include/intrinsics.h

To configure your image, run:

   make config

which will generate a config.h file that contains the settings for your build.

To compile the image run:

   make


It is HIGHLY suggested to make a clean build before you flash the image with:

   make clean main

== Problems ==

 * Compile / Link problems:
   If you get error messages like this one:

     msp430/bin/ld: build/eZChronos.elf section `.text' will not fit in region `text'
     .../msp430/bin/ld: section .vectors loaded at [000000000000ff80,000000000000ffff] overlaps section .text loaded at [0000000000008000,0000000000013343]
     .../msp430/bin/ld: region `text' overflowed by 13250 bytes
     collect2: ld returned 1 exit status

    or
     
     section .vectors loaded at [0000ff80,0000ffff] overlaps section .data loaded at [0000ff4e,0000ffcb]

   Your image is simply to large and will not fit into the flash. Try to disable some modules with make config and try again
   Or even better, send some patches that reduce code size ;-)

== Difference to the TI Firmware ==

 * More Features that can be configured with make config
 * Day of week
 * Disable 12h support (saves space)
 * Sleep Phase Clock - primary designed for http://github.com/poelzi/uberclock
 * The wireless flashing starts differently:
   Select RFBSL, Press DOWN to unlock, Press # long to start
 * No BlueRobin support. BlueRobin is a closed source binary blob.
   We don't have a compatible object file for that
 * Pressing STAR and UP long sets silent mode (no beep)

== Usefull Tools ==
 * mspdebug - debugger, proxy for gdb, flasher, ...  
     http://mspdebug.sourceforge.net
 * msp430static - static analyzer for sourcecode
     http://msp430static.sourceforge.net/
   run 'make source_index' to index all source files
