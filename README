
Fork to make use of the Real Time Clock (RTC) module for timekeeping.

This fork ports all of the time-keeping and alarm responsibilities over to the RTC module.
Previously, a 1-second interrupt from Timer A with time-keeping logic had been used.

Ideally, these changes should be transparent to the rest of the code. The current date and
time are managed by the RTC in its own registers, though a copy is updated each second in
the sTime and sDate structures for use by all other code. As nice as it would be to just
use the RTC module's registers for everything, reads to these registers can only be done
reliably when the register isn't transitioning, indicated by the RTCRDRDY bit. Rather than
test this bit every time and wait for it to be set before every read access to the current
time and/or date, it's simply easier to just update sTime (and sDate, as necessary) once a
second using the RTC module's 1-second interrupt.

If you are working with TI's header files, be careful about the definitions for the RTC
module's control registers! The bits for various options (e.g. RTCMODE) are often meant to
be used on the full 16-bit register (e.g. RTCCTL01), not on single byte registers (e.g. 
RTCCTL1). This created some odd problems for me!


== Status ==

Very much a work-in-progress! Though it appears to keep time (over the course of about 45
minutes), I can't make any guarantees.


== Todo ==

  * Test alarm functionality

  * Verify changes haven't disrupted other time-related code (sidereal clock, stopwatch,
    eggtimer, etc.)

  * Verify hour, day, day of week, month, and year transistions work correctly

  * Update logic/rfsimpliciti.c to set time in RTC module registers when wirelessly syncing

  * Re-arrange use of Timer A, now that TIMER0_A0 interrupt is unused

  * Update and/or verify IAR project file (probably just need to add "rtc.c" and "rtc.h"
    references somewhere)

  * Add in optional hour or noon/midnight beep functionality via RTCTEV interrupt

== Requirements ==

msp430-gcc4 http://mspgcc4.sourceforge.net/
make
python http://python.org

== Supported Compilers ==

msp430-gcc4
   Working combinations:
   gcc=4.4.3 binutils=2.20.1 libc=20100430

IAR msp430

Patches for more (more efficient) compilers are welcome :-)


== HOWTO ==

Copy gcc/intrinsics.h into [msp430-gcc-path]/msp430/include/intrinsics.h

To configure your image, run:

   make config

which will generate a config.h file that contains the settings for your build.

To compile the image run:

   make


It is HIGHLY suggested to make a clean build before you flash the image with:

   make clean main

== Problems ==

 * Compile / Link problems:
   If you get error messages like this one:

     msp430/bin/ld: build/eZChronos.elf section `.text' will not fit in region `text'
     .../msp430/bin/ld: section .vectors loaded at [000000000000ff80,000000000000ffff] overlaps section .text loaded at [0000000000008000,0000000000013343]
     .../msp430/bin/ld: region `text' overflowed by 13250 bytes
     collect2: ld returned 1 exit status

    or
     
     section .vectors loaded at [0000ff80,0000ffff] overlaps section .data loaded at [0000ff4e,0000ffcb]

   Your image is simply to large and will not fit into the flash. Try to disable some modules with make config and try again
   Or even better, send some patches that reduce code size ;-)

== Difference to the TI Firmware ==

 * More Features that can be configured with make config
 * Day of week
 * Disable 12h support (saves space)
 * Sleep Phase Clock - primary designed for http://github.com/poelzi/uberclock
 * The wireless flashing starts differently:
   Select RFBSL, Press DOWN to unlock, Press # long to start
 * No BlueRobin support. BlueRobin is a closed source binary blob.
   We don't have a compatible object file for that
 * Pressing STAR and UP long sets silent mode (no beep)

== Usefull Tools ==
 * mspdebug - debugger, proxy for gdb, flasher, ...  
     http://mspdebug.sourceforge.net
 * msp430static - static analyzer for sourcecode
     http://msp430static.sourceforge.net/
   run 'make source_index' to index all source files
